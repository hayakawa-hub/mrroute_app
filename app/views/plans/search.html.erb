<div class="wrapper"></div>
<div class="loding"></div>




<div id="container">
  <div class="back">
  <%= link_to "<<", user_path(id: current_user.id) %>
  </div>

  <p class="title">MrRoute<p>
  <div class="input">
   <label for="title" class="label">タイトル</label><br>
  <input type="text" id="title" placeholder="例）映画館デート"name="title" style="width: 70%" required><br>
  </div>
  <div class="input">
   <label for="depatureTime" class="label">出発時間</label><br>
   <input type="time" id="depatureTime" name="depatureTime" required><br>
  </div>
  <div class="input">
   <label for="depaturedAddress" class="label">出発住所</label><br>
   <input type="text" id="depaturedAddress" placeholder="例）小牧市●町■町目" style="width: 70%" ><br>
  </div>
  <div class="input">
   <label for="todo" class="label">やりたいことはなんですか？</label><br>
   <input type="text" id="todo" placeholder="例）映画館" style="width: 70%" ><br>
  </div>
 <div class="input">
   <label for="resutaurantCategory" class="label">食べたいものはなんですか？</label><br>
   <input type="text" id="resutaurantCategory" placeholder="例）中華料理" style="width: 70%" ><br>
 </div>
 <div class="input">
  <label for="destinationAddress" class="label">到着住所（出発住所と同じ）</label><br>
  <input type="text" id="destinationAddress" placeholder="例）小牧市●町■町目" style="width: 70%"  readonly><br>
 </div>
<div id="only_search">
 <input type="button" value="検索" onclick="tameshi(),count1();">
</div>

</div>

<%= form_for(@plan,url:{controller:'plans',action:'create'}) do |form|%>

  <div>
  <%= form.hidden_field :user_id , value:current_user.id %>
  </div>

  <div>
  <%= form.hidden_field :title , value:"値" %>
  </div>

  <div>
  <%= form.hidden_field :depature_time , value:"値" %>
  </div>

  <div>
  <%= form.hidden_field :depature_address, value:"値" %>
  </div>

  <div>
  <%= form.hidden_field :destination_address, value:"値" %>
  </div>

  <div>
  <%= form.hidden_field :stopby_address1, value:"値" %>
  </div>

  <div>
  <%= form.hidden_field :stopby_name1, value:"値" %>
  </div>

  <div>
  <%= form.hidden_field :stopby_address2, value:"値" %>
  </div>

  <div>
  <%= form.hidden_field :stopby_name2, value:"値" %>
  </div>

  <div class="flex">
   <div class="hidden">
    <%=form.submit value="保存"%>
   </div>

 

<%end%>


 
<div id="only_back" class="hidden">
 <input type="button" value="再度検索" onclick="location.href='/plans/search' ">
</div>

</div>




















<script type="text/javascript">

var content =[]
var placesList=[]
var totalduration=[]
var totaldistance=[]
var totaladdress=[]
var totalname=[]
var title=""
var time1=""
var time2=""
var time3=""
var time4=""
var time5=""
var time6=""
var time=""





function tameshi(){


 

  var depaturedAddress =document.getElementById('depaturedAddress').value;

  var todo =document.getElementById('todo').value;
  var resutaurantCategory =document.getElementById('resutaurantCategory').value;
  var destinationAddress =document.getElementById('destinationAddress').value;
  content.push(depaturedAddress,todo,resutaurantCategory,destinationAddress)

  title=document.getElementById('title').value;

 
}



//全体の状況を管理する関数、place4まで代入されたらcreateを実行する
function count1(){

  searchPlace(content[0],function(results,status){
    place1 = results[0].geometry.location
    place4 = results[0].geometry.location
 
    searchNearby(place1,content[1],function(results,status){
      placesList = placesList.concat(results);
      for (var i = 0; i < placesList.length; i++){
        if(placesList[i].rating == undefined){
          placesList[i].rating = -1;
        }
      }

      placesList.sort(function(a,b){
        if(a.rating > b.rating) return -1;
        if(a.rating < b.rating) return 1;
        return 0;
      });

      var place2=results[0].geometry.location

      

      totalname.push(results[0].name)
      totaladdress.push(results[0].vicinity)

      placesList = new Array();
      

      searchNearby(place2,content[2],function(results,status){

        placesList = placesList.concat(results);

        for (var i = 0; i < placesList.length; i++){
          if(placesList[i].rating == undefined){
            placesList[i].rating = -1;
          }
        }

        placesList.sort(function(a,b){
          if(a.rating > b.rating) return -1;
          if(a.rating < b.rating) return 1;
          return 0;
        });

        var place3=results[0].geometry.location
        totalname.push(results[0].name)
        totaladdress.push(results[0].vicinity)      

        placesList = new Array();


        getRoute(place1,place2,function(response,status){


          var distance=response.routes[0].legs[0].distance.text;
          var duration=response.routes[0].legs[0].duration.text;
          console.log(distance)
          console.log(duration)

          var distandereplaced=distance.replace(',','.');
          var distances = parseFloat(distandereplaced);
          totaldistance.push(distances);

          if(duration.includes('h')){
            var result= duration.search('h');
            var search =result-1;
            var hours =  duration.charAt(search);
            var min =parseInt(hours);
            var mints = min*60;
            var result2 = duration.search('min');
            var min2 = 0;
            min2 = parseInt(duration.substr(result+1,duration.length));
            mints += min2;
            totalduration.push(mints);
          }else{
            var mints = parseInt(duration);
            totalduration.push(mints);
          }
          console.log(totaldistance[0])
          console.log(totalduration[0])
      

          getRoute(place2,place3,function(response,status){
            var distance=response.routes[0].legs[0].distance.text;
            var duration=response.routes[0].legs[0].duration.text;
            console.log(distance)
            console.log(duration)

            var distandereplaced=distance.replace(',','.');
            var distances = parseFloat(distandereplaced);
            totaldistance.push(distances);

            if(duration.includes('h')){
              var result= duration.search('h');
              var search =result-1;
              var hours =  duration.charAt(search);
              var min =parseInt(hours);
              var mints = min*60;
              var result2 = duration.search('min');
              var min2 = 0;
              min2 = parseInt(duration.substr(result+1,duration.length));
              mints += min2;
              totalduration.push(mints);
            }else{
              var mints = parseInt(duration);
              totalduration.push(mints);
            }
            console.log(totaldistance[1])
            console.log(totalduration[1])


            getRoute(place3,place4,function(response,status){
              var distance=response.routes[0].legs[0].distance.text;
              var duration=response.routes[0].legs[0].duration.text;
              console.log(distance)
              console.log(duration)

              var distandereplaced=distance.replace(',','.');
              var distances = parseFloat(distandereplaced);
              totaldistance.push(distances);

              if(duration.includes('h')){
                var result= duration.search('h');
                var search =result-1;
                var hours =  duration.charAt(search);
                var min =parseInt(hours);
                var mints = min*60;
                var result2 = duration.search('min');
                var min2 = 0;
                min2 = parseInt(duration.substr(result+1,duration.length));
                mints += min2;
                totalduration.push(mints);
              }else{
                var mints = parseInt(duration);
                totalduration.push(mints);
                console.log(totaldistance[2])
                console.log(totalduration[2])

              }
              time=document.getElementById('depatureTime').value;




              example()

              display()

              document.getElementById("plan_title").value=title;
              document.getElementById("plan_depature_time").value=time;
              document.getElementById("plan_depature_address").value=content[0];
              document.getElementById("plan_destination_address").value=content[3];
              document.getElementById("plan_stopby_address1").value=totaladdress[0];
              document.getElementById("plan_stopby_address2").value=totaladdress[1];
              document.getElementById("plan_stopby_name1").value=totalname[0];
              document.getElementById("plan_stopby_name2").value=totalname[1];

              


            
             
            })
          })
        })
      })
    })
  })
}


function example(){
  $(function(){
    time=document.getElementById('depatureTime').value;

    

    var ymd='2020/12/30'
    var date_format=ymd+' '+time;
    var timer=new Date(date_format);

    var time1time=timer.toLocaleTimeString();
    time1=time1time.slice(0,-3)

    timer.setMinutes(timer.getMinutes()+totalduration[0]);
    var time2time=timer.toLocaleTimeString();
    time2=time2time.slice(0,-3)


    timer.setMinutes(timer.getMinutes()+60);
    var time3time=timer.toLocaleTimeString();
    time3=time3time.slice(0,-3);

    timer.setMinutes(timer.getMinutes()+totalduration[1]);
    var time4time=timer.toLocaleTimeString();
    time4=time4time.slice(0,-3);

    timer.setMinutes(timer.getMinutes()+60);
    var time5time=timer.toLocaleTimeString();
    time5=time5time.slice(0,-3);

    timer.setMinutes(timer.getMinutes()+totalduration[2]);
    var time6time=timer.toLocaleTimeString();
    time6=time6time.slice(0,-3);



        $('#container').remove()


        var html_string = '<div class="result_container">'
        html_string +='<div class="result_top">'
        html_string +='<h1>'+title+'</h1>';
        html_string +='</div>'
        html_string +='<div class="tl">';
        html_string +='<div class="tl-content main-bdr">';
        html_string += '<div class="tl_label">'+time1+' '+'出発！！！'+'</div>';
        html_string +='<div class="tl_main">車</div>';
        html_string +='<div class="tl_marker main-bdr main-bc"></div>';
        html_string +='</div>';
        html_string +='<div class="tl-content main-bdr">'
        html_string +='<div class="tl_label">'+time2+'</div>';
        html_string +='<div class="tl_main">'+totalname[0]+'<br>'+'【住所】'+totaladdress[0]+'</div>';
        html_string +='<div class="tl_marker main-bdr main-bc"></div>';
        html_string +='</div>';
        html_string +='<div class="tl-content main-bdr">'
        html_string +='<div class="tl_label">'+time3+'</div>';
        html_string +='<div class="tl_main">車</div>';
        html_string +='<div class="tl_marker main-bdr main-bc"></div>';
        html_string +='</div>';
        html_string +='<div class="tl-content main-bdr">';
        html_string +='<div class="tl_label">'+time4+'</div>';
        html_string +='<div class="tl_main">'+totalname[1]+'<br>'+'【住所】'+totaladdress[1]+'</div>';
        html_string +='<div class="tl_marker main-bdr main-bc"></div>';
        html_string +='</div>';
        html_string +='<div class="tl-content main-bdr">';
        html_string +='<div class="tl_label">'+time5+'</div>';
        html_string +='<div class="tl_main">車</div>';
        html_string +='<div class="tl_marker main-bdr main-bc"></div>';
        html_string +='</div>';
        html_string +='<div class="tl-content main-bdr">';
        html_string +='<div class="tl_label">'+time6+' '+'到着！！！'+'</div>'
        html_string +='<div class="tl_marker main-bdr main-bc"></div>';
        html_string +='</div>';
        html_string +='</div>';
        html_string +='</div>';


        $('.wrapper').append(html_string)



  });
}

$(function() {
  $("#depaturedAddress").on("keyup", function(){
    var charNum = $(this).val();
    $("#destinationAddress").val(charNum );
  });
});





//２箇所の時間と距離をだす関数
function getRoute(from,to,callback){
  var directionsService = new google.maps.DirectionsService();

  directionsService.route({
    origin:from,
    destination:to,
    travelMode:google.maps.DirectionsTravelMode.DRIVING,
  },callback
  );
}


//住所を元に近くのお店を検索する関数
function searchNearby(idokeido,keywordInput,callback){
  var map = new google.maps.Map(
    document.createElement("div")
  );

  var service = new google.maps.places.PlacesService(map);

  service.nearbySearch(
    {
      location:idokeido,
      radius: 10000,
      keyword: keywordInput,
      
    },
    callback
  );
}



//始めの小牧市の住所を取得するための関数
function searchPlace(addressInput, callback){

var geocoder = new google.maps.Geocoder();
geocoder.geocode({address:addressInput}, callback);
}


function display(){
  $(function(){
    $(".hidden").show()

  });
}





</script>